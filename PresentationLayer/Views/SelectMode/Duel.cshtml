<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Duel</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/duel-mode.css" rel="stylesheet" />
    <link href="~/css/answer-effects.css" rel="stylesheet" />
</head>
<body translate="no">
<header class="head__part">
    <div class="back-button">
        <a asp-controller="Home" asp-action="SelectMode" id="backButton" class="head__back">Назад</a>
    </div>

    <div class="question">
        <img class="question-style" src="~/img/game/question-style.svg" alt="Alternate Text" />
        <div class="question-text">
            <div translate="no" id="questionText"><br />Что за бренд на фото?</div>
        </div>
    </div>
</header>
<main class="main__part">
    <div id="questionSection" style="display: none;">
        <div class="question-img">
            <img id="questionImage" src="~/img/questions/" alt="Question Image" style="display: none;">
        </div>
        <div class="question-answer" translate="no">
            <div class="wrapper" id="answersList"></div>
        </div>
    </div>
    <button id="joinDuelBtn" class="btn btn-primary">Join Duel</button>
</main>
<footer class="footer__part"></footer>

<!-- Подключение jQuery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<!-- Подключение Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gameHub")
        .build();

    let chatRoom = '';
    let selectedAnswer = '';
    let userName = '';

    connection.on("ReceiveQuestion", function (questionId, questionText, imageUrl, answers) {
        console.log("Received question:", questionId, questionText, imageUrl, answers); // Logging received data
        document.getElementById('questionText').innerText = questionText; // Setting question text
        document.getElementById('questionText').setAttribute('data-question-id', questionId);
        if (imageUrl) {
            document.getElementById('questionImage').src = "/img/questions/" + imageUrl;
            document.getElementById('questionImage').style.display = 'block';
        } else {
            document.getElementById('questionImage').style.display = 'none';
        }

        const answersList = document.getElementById('answersList');
        answersList.innerHTML = '';

        // Shuffle answers randomly
        answers = shuffle(answers);

        const column1 = document.createElement('div');
        const column2 = document.createElement('div');
        column1.classList.add('wrapper-answer');
        column2.classList.add('wrapper-answer');

        answers.forEach((answer, index) => {
            const li = document.createElement('li');
            li.textContent = answer;
            li.classList.add('answer');
            li.classList.add('eventListener');
            li.addEventListener('click', async function () {
                selectedAnswer = answer;
                document.querySelectorAll('#answersList .answer').forEach(item => {
                    item.classList.remove('selected');
                });
                li.classList.add('selected');
                await submitAnswer(questionId, selectedAnswer);
            });
            if (index % 2 === 0) {
                column1.appendChild(li);
            } else {
                column2.appendChild(li);
            }
        });

        answersList.appendChild(column1);
        answersList.appendChild(column2);
    });

    // Function to shuffle array randomly
    function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // Function to delay execution
    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    connection.on("AnswerResult", async function (isCorrect) {
        const selectedElement = document.querySelector('.answer.selected');
        if (selectedElement) {
            selectedElement.classList.add(isCorrect ? 'correct' : 'incorrect');
        }
        await delay(300); // Adding delay before switching to the next question
        getNextQuestion();
    });

    connection.on("GameReady", function () {
        console.log("Both players are ready!");
        document.getElementById('questionSection').style.display = 'block';
    });

    connection.on("StartGame", function () {
        console.log("Game has started!");
        document.getElementById('questionSection').style.display = 'block';
        getNextQuestion();
    });

    async function joinDuel() {
        try {
            await connection.start();
            userName = prompt("Enter your username");
            chatRoom = prompt("Enter room name");
            if (!userName || !chatRoom) {
                alert("Username and room name are required.");
                return;
            }
            await connection.invoke("JoinDuel", { UserName: userName, ChatRoom: chatRoom });
            console.log("Connected and joined duel");
        } catch (err) {
            console.error("Error in joinDuel:", err);
        }
    }

    async function getNextQuestion() {
        try {
            const questionId = parseInt(document.getElementById('questionText').getAttribute('data-question-id')) || 0;
            console.log(`Requesting next question: index=${questionId}`);
            await connection.invoke("GetNextQuestion", userName, chatRoom, questionId);
        } catch (err) {
            console.error(err);
        }
    }

    async function submitAnswer(questionId, answer) {
        try {
            console.log(`Submitting answer: UserName=${userName}, ChatRoom=${chatRoom}, QuestionId=${questionId}, Answer=${answer}`);
            await connection.invoke("AnswerQuestion", userName, chatRoom, questionId, answer);
        } catch (err) {
            console.error("Error invoking AnswerQuestion:", err);
        }
    }

    document.getElementById('joinDuelBtn').addEventListener('click', joinDuel);
</script>
</body>
</html>
