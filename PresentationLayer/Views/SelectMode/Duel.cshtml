<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Duel</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css" />
    <link href="~/css/duel-mode.css" rel="stylesheet" />
    <link href="~/css/answer-effects.css" rel="stylesheet" />
</head>
<body translate="no">
<header class="head__part">
    <div class="back-button">
        <a asp-controller="Home" asp-action="SelectMode" id="backButton" class="head__back">Назад</a>
    </div>

    <div id="question" class="question" style="display: none">
        <div class="relative-container">
            <img class="question-style" src="~/img/game/question-style.svg" alt="Alternate Text" />
            <div class="question-text">
                <div translate="no" id="questionText"><br />Что за бренд <br/> на фото?</div>
            </div>
            <div id="timeBarContainer">
                <div id="timerBar"></div>
            </div>
        </div>
    </div>

</header>
<main class="main__part">
    <div id="questionSection" style="display: none;">
        <div class="question-img">
            <img id="questionImage" src="~/img/questions/" alt="Question Image" style="display: none;">
        </div>
        <div class="question-answer" translate="no">
            <div class="wrapper" id="answersList"></div>
        </div>
    </div>
    <div class="card-login-container">
        <div class="card-login">
            <div class="duel-log">
                <h2 class="card-log-title">Подключение к комнате</h2>
                <div class="input__name_wrapper">
                    <input id="input__name" placeholder="Имя" type="text" class="input__name"/>
                </div>
                <div class="input__room_wrapper">
                    <input id="input__room" placeholder="Название комнаты" type="text" class="input__room"/>
                </div>
                <button id="joinDuelBtn" class="button join-duel-btn">Присоединиться</button>
            </div>
        </div>
    </div>
    <div class="finish__level">
        <!-- Здесь будет вставлен результат игры -->
    </div>
    <div id="timer" style="display: none;">45</div> <!-- Таймер на 45 секунд -->
</main>
<footer class="footer__part"></footer>

<!-- Подключение jQuery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<!-- Подключение Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script src="//bootstraptema.ru/snippets/effect/2018/confettikit/randomColor.js"></script>
<script src="//bootstraptema.ru/snippets/effect/2018/confettikit/confettikit.min.js"></script>
<script>
    // JavaScript код для работы с SignalR и другими функциями

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gameHub")
        .build();

    let chatRoom = '';
    let selectedAnswer = '';
    let userName = '';
    let isJoining = false;
    let timerInterval;

    connection.on("ReceiveQuestion", function (questionId, questionText, imageUrl, answers) {
        console.log("Received question:", questionId, questionText, imageUrl, answers); // Logging received data
        document.getElementById('questionText').innerText = questionText; // Setting question text
        document.getElementById('questionText').setAttribute('data-question-id', questionId);
        if (imageUrl) {
            document.getElementById('questionImage').src = "/img/questions/" + imageUrl;
            document.getElementById('questionImage').style.display = 'block';
        } else {
            document.getElementById('questionImage').style.display = 'none';
        }

        document.getElementById('joinDuelBtn').style.display = 'none';

        const answersList = document.getElementById('answersList');
        answersList.innerHTML = '';

        // Shuffle answers randomly
        answers = shuffle(answers);

        const column1 = document.createElement('div');
        const column2 = document.createElement('div');
        column1.classList.add('wrapper-answer');
        column2.classList.add('wrapper-answer');

        answers.forEach((answer, index) => {
            const li = document.createElement('li');
            li.textContent = answer;
            li.classList.add('answer');
            li.classList.add('eventListener');
            li.addEventListener('click', async function () {
                selectedAnswer = answer;
                document.querySelectorAll('#answersList .answer').forEach(item => {
                    item.classList.remove('selected');
                });
                li.classList.add('selected');
                await submitAnswer(questionId, selectedAnswer);
            });
            if (index % 2 === 0) {
                column1.appendChild(li);
            } else {
                column2.appendChild(li);
            }
        });

        answersList.appendChild(column1);
        answersList.appendChild(column2);

        // Запуск таймера только при получении первого вопроса
        if (!timerInterval) {
            startTimer(45); // Specify the duration in seconds
        }
    });

    // Function to shuffle array randomly
    function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    connection.on("AnswerResult", function (isCorrect) {
        const selectedElement = document.querySelector('.answer.selected');
        if (selectedElement) {
            selectedElement.classList.add(isCorrect ? 'correct' : 'incorrect');
        }
        getNextQuestion(); // Запрашиваем следующий вопрос сразу после получения результата ответа
    });

    connection.on("GameReady", function () {
        console.log("Both players are ready!");
        document.getElementById('questionSection').style.display = 'block';
        document.getElementById('question').style.display = 'flex';
    });

    connection.on("StartGame", function () {
        console.log("Game has started!");
        document.getElementById('questionSection').style.display = 'block';
        document.getElementById('question').style.display = 'flex';
        getNextQuestion();
    });

    // Ensure this script is loaded and confettiKit is defined before this code runs
    connection.on("EndGame", function (results) {
        document.getElementById('questionSection').style.display = 'none';
        document.getElementById('question').style.display = 'none';

        const finishLevel = document.querySelector('.finish__level');
        finishLevel.innerHTML = '';

        let resultText = '<div class="finish__text">Победа!</div>';

        for (let [player, score] of Object.entries(results)) {
            resultText += `<div class="finish__level">Игрок: ${player}, Счет: ${score}</div>`;
        }

        let totalCorrectAnswers = Object.values(results).reduce((acc, cur) => acc + cur, 0);

        resultText += `<div class="correct__answ">Вы ответили на ${totalCorrectAnswers} верно!</div>` +
            '<a href="/Home/SelectMode" class="return__button">Главное меню</a>';

        finishLevel.innerHTML = resultText;
        console.log('Game Ended:', results);

        clearInterval(timerInterval);
        timerInterval = null;

        console.log('END');

        // Trigger confetti animation
        new confettiKit({
            confettiCount: 40,
            angle: 60,
            startVelocity: 80,
            colors: randomColor({ hue: 'blue', count: 18 }),
            elements: {
                'confetti': {
                    direction: 'down',
                    rotation: true,
                },
                'star': {
                    count: 10,
                    direction: 'down',
                    rotation: true,
                },
                'ribbon': {
                    count: 5,
                    direction: 'down',
                    rotation: true,
                },
                'custom': [{
                    count: getRandomInt(2, 4),
                    width: 50,
                    textSize: 15,
                    content: '//bootstraptema.ru/snippets/effect/2018/confettikit/shar.png',
                    contentType: 'image',
                    direction: 'up',
                    rotation: false,
                }]
            },
            position: 'bottomLeftRight',
        });
    });

    // Helper function to get random integer between min and max (inclusive)
    function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    async function joinDuel() {
        if (isJoining) return; // Prevent multiple join attempts
        isJoining = true;

        try {
            await connection.start();
            userName = document.getElementById('input__name').value;
            chatRoom = document.getElementById('input__room').value;
            if (!userName || !chatRoom) {
                alert("Username and room name are required.");
                isJoining = false;
                return;
            }
            await connection.invoke("JoinDuel", { UserName: userName, ChatRoom: chatRoom });
            console.log("Connected and joined duel");
        } catch (err) {
            console.error("Error in joinDuel:", err);
        } finally {
            isJoining = false; // Reset flag after joining attempt
        }
    }

    async function getNextQuestion() {
        try {
            const questionId = parseInt(document.getElementById('questionText').getAttribute('data-question-id')) || 0;
            console.log(`Requesting next question: index=${questionId}`);
            await connection.invoke("GetNextQuestion", userName, chatRoom, questionId);
        } catch (err) {
            console.error(err);
        }
    }

    async function submitAnswer(questionId, answer) {
        try {
            console.log(`Submitting answer: UserName=${userName}, ChatRoom=${chatRoom}, QuestionId=${questionId}, Answer=${answer}`);
            await connection.invoke("AnswerQuestion", userName, chatRoom, questionId, answer);
        } catch (err) {
            console.error("Error invoking AnswerQuestion:", err);
        }
    }

    async function endGame() {
        try {
            await connection.invoke("EndGame", chatRoom); // Ensure chatRoom is passed
        } catch (err) {
            console.error("Error invoking EndGame:", err);
        }
    }

    // Timer function
    function startTimer(durationInSeconds) {
        console.log("Timer started for", durationInSeconds, "seconds");
        const timerBar = document.getElementById('timerBar');
        const totalWidth = document.getElementById('timeBarContainer').offsetWidth;

        // Инициализируем начальное состояние
        timerBar.style.width = totalWidth + 'px';

        let currentTime = durationInSeconds;

        timerInterval = setInterval(() => {
            currentTime -= 1;
            const newWidth = (currentTime / durationInSeconds) * totalWidth;
            @*
            console.log("Timer update: currentTime =", currentTime, "newWidth =", newWidth);
            *@
            timerBar.style.width = newWidth + 'px';

            if (currentTime <= 0) {
                clearInterval(timerInterval);
                timerBar.style.width = '0px';
                endGame(); // Call end game function
            }
        }, 1000);
    }

    document.getElementById('joinDuelBtn').addEventListener('click', joinDuel);
    connection.on("RoomFull", function () {
        alert("Комната заполнена!");
        window.location.reload();
    });
</script>
</body>
</html>

